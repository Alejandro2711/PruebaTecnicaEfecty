@page "/Home"

@attribute [PageInfo(Perfilable = false)]

@using PruebaTecnica.Domain.Entities.Parametrizacion
@using PruebaTecnica.Domain.Entities.Prueba
@using PruebaTecnica.Services.Interfaces.Parametrizacion
@using PruebaTecnica.Services.Interfaces.Prueba
@using Blazored.FluentValidation

@inject IPruebaService _pruebaService;
@inject IParametroGeneralService _parService;
@inject ILogger<Home> _logger;

<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0">Parámetros Generales</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">Parametrización</a></li>
                    <li class="breadcrumb-item active">Parámetros Generales</li>
                </ol>
            </div>

        </div>
    </div>
</div>

@if (_isLoading)
{
    <_Loading></_Loading>
}
else
{
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">Información del Parámetro General</h4>
                </div>
                <div class="card-body">
                    <p class="card-title-desc"></p>
                    <EditForm Model="_prueba" OnValidSubmit="guardarPrueba">
                        <FluentValidationValidator />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Nombre</label>
                                    <input type="text" class="form-control" @bind-value="_prueba.Nombre" />
                                    <ValidationMessage class="text-validacion-error" For="() => _prueba.Nombre" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Apellidos</label>
                                    <input type="text" class="form-control" @bind-value="_prueba.Apellidos" />
                                    <ValidationMessage class="text-validacion-error" For="() => _prueba.Apellidos" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Fecha Nacimiento</label>
                                    <input type="date" class="form-control" @bind-value="_prueba.FechaNacimiento" />
                                    <ValidationMessage class="text-validacion-error" For="() => _prueba.FechaNacimiento" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Tipo Doucmento</label>
                                    <RadzenDropDown @bind-Value=@_prueba.TipoDocumento TValue="long?" Data=@_tipodoc.ListaParametrosDetallados TextProperty="Nombre" ValueProperty="Id" />
                                    <ValidationMessage class="text-validacion-error" For="() => _prueba.TipoDocumento" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Estado Civil</label>
                                    <RadzenRadioButtonList Data="@_EstadoCivil.ListaParametrosDetallados" @bind-Value=@_prueba.EstadoCivil TValue="long?" TextProperty="Nombre" ValueProperty="Id">
                                    </RadzenRadioButtonList>
                                    <ValidationMessage class="text-validacion-error" For="() => _prueba.EstadoCivil" />
                                </div>
                            </div>
                        </div>
                        <br>
                        <br>

                        <button class="btn btn-primary" type="submit">Guardar</button>
                    </EditForm>
                </div>
                <!-- end card body -->
            </div>
            <!-- end card -->
        </div>
        <!-- end col -->
    </div>
}

@code{
    public PruebaModel _prueba = new();
    private bool _isLoading = true;

    private ParametroGeneral _tipodoc;
    private ParametroGeneral _EstadoCivil;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        try
        {
            if (firstRender)
            {
                await loadData();
            }
        }
        catch(Exception exe)
        {

        }
    }
    public async Task loadData()
    {
        _isLoading = true;
        StateHasChanged();

        _tipodoc = await _parService.ConsultarParametroGeneralById(2);
        _EstadoCivil = await _parService.ConsultarParametroGeneralById(3);

        _isLoading = false;
        StateHasChanged();
    }
    public async Task guardarPrueba()
    {
        try
        {
            await _jsRuntime.NotiflixLoading(NotiflixLoadingType.hourglass, "Procesando");

            if (!await _pruebaService.InsertarPrueba(_prueba))
            {
                await _jsRuntime.NotiflixReportAlert("Error", "Error al guardar los datos", NotiflixMessageType.failure);
                return;
            }

            await _jsRuntime.NotiflixReportAlert("Correcto", "Información guardada correctamente", NotiflixMessageType.success);
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al guardar los datos");
            await _jsRuntime.NotiflixNotifyAlert("Error al realizar esta operación", NotiflixMessageType.failure);

        }
    }
}